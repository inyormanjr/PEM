{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class DataService {\n  constructor() {\n    this.errors = [{\n      code: 'MCOL',\n      description: 'Missing Specimen or incomplete COLlection',\n      example: 'MCOL – Hepatitis serology testing requested but no blood collected'\n    }, {\n      code: 'WSCO',\n      description: 'Wrong Specimen COllected (Wrong container)',\n      example: 'WSCO - Von Willebrand Screen (VWS) requested but SST (Gold) collected'\n    }, {\n      code: 'ETCO',\n      description: 'Excessive Tubes Collected',\n      example: 'ETCO – x3 EDTA tubes collected for Full Blood Count (FBC)'\n    }\n    // Add more errors as needed...\n    ];\n  }\n\n  searchErrors(query) {\n    const results = this.errors.filter(error => error.code.toLowerCase().includes(query.toLowerCase()) || error.description.toLowerCase().includes(query.toLowerCase()));\n    return of(results);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)();\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,EAAE,QAAQ,MAAM;;AAKrC,OAAM,MAAOC,WAAW;EAsBtBC;IArBQ,WAAM,GAAG,CACf;MACEC,IAAI,EAAE,MAAM;MACZC,WAAW,EAAE,2CAA2C;MACxDC,OAAO,EACL;KACH,EACD;MACEF,IAAI,EAAE,MAAM;MACZC,WAAW,EAAE,4CAA4C;MACzDC,OAAO,EACL;KACH,EACD;MACEF,IAAI,EAAE,MAAM;MACZC,WAAW,EAAE,2BAA2B;MACxCC,OAAO,EAAE;;IAEX;IAAA,CACD;EAEc;;EAEfC,YAAY,CAACC,KAAa;IACxB,MAAMC,OAAO,GAAG,IAAI,CAACC,MAAM,CAACC,MAAM,CAC/BC,KAAK,IACJA,KAAK,CAACR,IAAI,CAACS,WAAW,EAAE,CAACC,QAAQ,CAACN,KAAK,CAACK,WAAW,EAAE,CAAC,IACtDD,KAAK,CAACP,WAAW,CAACQ,WAAW,EAAE,CAACC,QAAQ,CAACN,KAAK,CAACK,WAAW,EAAE,CAAC,CAChE;IACD,OAAOZ,EAAE,CAACQ,OAAO,CAAC;EACpB;;AA/BWP,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAa,SAAXb,WAAW;EAAAc,YAFV;AAAM","names":["of","DataService","constructor","code","description","example","searchErrors","query","results","errors","filter","error","toLowerCase","includes","factory","providedIn"],"sourceRoot":"","sources":["/Users/ronilojunioryap/Projects/PEM/PEM.WebApp/ClientApp/src/app/services/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n  private errors = [\n    {\n      code: 'MCOL',\n      description: 'Missing Specimen or incomplete COLlection',\n      example:\n        'MCOL – Hepatitis serology testing requested but no blood collected',\n    },\n    {\n      code: 'WSCO',\n      description: 'Wrong Specimen COllected (Wrong container)',\n      example:\n        'WSCO - Von Willebrand Screen (VWS) requested but SST (Gold) collected',\n    },\n    {\n      code: 'ETCO',\n      description: 'Excessive Tubes Collected',\n      example: 'ETCO – x3 EDTA tubes collected for Full Blood Count (FBC)',\n    },\n    // Add more errors as needed...\n  ];\n\n  constructor() {}\n\n  searchErrors(query: string): Observable<any[]> {\n    const results = this.errors.filter(\n      (error) =>\n        error.code.toLowerCase().includes(query.toLowerCase()) ||\n        error.description.toLowerCase().includes(query.toLowerCase())\n    );\n    return of(results);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}